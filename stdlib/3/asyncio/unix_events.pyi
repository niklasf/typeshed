from typing import Any, Callable, Optional, TypeVar
from types import TracebackType

from .events import AbstractEventLoop

_SelfT = TypeVar('_SelfT')

class AbstractChildWatcher:
    def add_child_handler(self, pid: int, callback: Callable[..., None], *args: Any) -> None: ...
    def remove_child_handler(self, pid: int) -> None: ...
    def attach_loop(self, loop: AbstractEventLoop) -> None: ...
    def close(self) -> None: ...
    def is_active(self) -> bool: ...
    def __enter__(self: _SelfT) -> _SelfT: ...
    def __exit__(self, t: Optional[type], v: Optional[BaseException], tb: Optional[TracebackType]) -> None: ...
